# Background

[Edge SmartScreen](https://docs.microsoft.com/en-us/deployedge/microsoft-edge-security-smartscreen) helps you identify reported phishing and malware websites, and also helps you make informed decisions about downloads.

Currently, end developers can use `options->put_AdditionalBrowserArguments(L"--disable-features=msSmartScreenProtection")` to control SmartScreen in the WebView2 application. It is essentially a startup parameter of the browser process. It must be determined when the WebView2Environment is created. And and cannot be modified at runtime.

To support more flexibility we introduce a new API.

In this document we describe the new setting. We'd appreciate your feedback.


# Description
Users can use ICoreWebView2Settings to control it.When it is changed, all WebView2 applications using the same path of the user data folder will be changed.
`put_IsSmartScreenRequired(true)` will always take effect when multiple WebView2s using the same user data folder call `put_IsSmartScreenRequired` at the same time.`put_IsSmartScreenRequired(false)` only takes effect if all WebView2 settings are false.
The default value for `IsSmartScreenRequired` is the current actual value.After this, this setting does not mean the actual situation, it only represents the intention of current WebView.
When the set `false` takes effect, it will turn off SmartScreen protection when visiting web pages and performing downloads.

Changes to `IsSmartScreenRequired` does not take effect until the next navigation or download.


# Examples
```cpp
wil::com_ptr<ICoreWebView2Settings> m_webViewSettings;
void SettingsComponent::ToggleSmartScreenRequired()
{
    wil::com_ptr<ICoreWebView2Settings11> coreWebView2Settings11;
    coreWebView2Settings11 =
                m_webViewSettings.try_query<ICoreWebView2Settings11>();
    if(coreWebView2Settings11) 
    {
        BOOL enabled;
        CHECK_FAILURE(coreWebView2Settings11->get_IsSmartScreenRequired(&enabled));
        CHECK_FAILURE(coreWebView2Settings11->put_IsSmartScreenRequired(enabled ? FALSE : TRUE));
    }
}
```

```c#
void ToggleSmartScreenRequired()
{
    var settings = webView2Control.CoreWebView2.Settings;
    settings.IsSmartScreenRequired = !settings.IsSmartScreenRequired;
}
```

# Remarks
 All WebViews using the same user data folder share the same SmartScreen setting. When it is changed, the change will be applied to all WebViews using the same user data folder.

# API Notes

See [API Details](#api-details) section below for API reference.

# API Details

## Win32 C++
```cpp
[uuid(d667d3a7-c1b7-479f-8833-db7547df6687), object, pointer_default(unique)]
interface ICoreWebView2Settings11 : ICoreWebView2Settings10 {
  /// SmartScreen helps you identify reported phishing and malware websites  
  /// and also helps you make informed decisions about downloads. 
  /// `IsSmartScreenRequired`  is used to control whether SmartScreen is turned on or not. 
  /// All WebViews using the same user data folder share the same SmartScreen setting. 
  /// When it is changed, the change will be applied to all WebViews using the 
  /// same user data folder. 
  /// By default, it is the current actual state of SmartScreen.
  /// \snippet SettingsComponent.cpp ToggleSmartScreenEnabled.
  [propget] HRESULT IsSmartScreenRequired([out, retval] BOOL* value); 

  /// The setting of SmartScreen does not mean the actual situation, it only represents 
  /// the intention of each WebView2.
  /// `put_IsSmartScreenRequired(true)` will always take effect when multiple WebView2s 
  /// using the same user data folder call `put_IsSmartScreenRequired` at the same time.
  /// `put_IsSmartScreenRequired(false)` only takes effect if all WebView2 settings are false.
  /// Set the `IsSmartScreenRequired` property. 
  [propput] HRESULT IsSmartScreenRequired([in] BOOL value); 
}
```

## .NET and WinRT
namespace Microsoft.Web.WebView2.Core
{
    public partial class CoreWebView2Settings
    {
        public bool IsSmartScreenRequired { get; set; };
        public bool IsSmartScreenRequired { get; set; };
    }
}

